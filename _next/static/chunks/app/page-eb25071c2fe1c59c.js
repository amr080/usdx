(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[931], { 75393: function (e, t, n) { Promise.resolve().then(n.bind(n, 12719)), Promise.resolve().then(n.bind(n, 70910)), Promise.resolve().then(n.t.bind(n, 48214, 23)), Promise.resolve().then(n.t.bind(n, 85783, 23)) }, 12719: function (e, t, n) { "use strict"; n.r(t), n.d(t, { DashboardSection: function () { return DashboardSection } }); var a = n(38057), i = n(70218), s = n.n(i), r = n(7653); let Card = e => { let { children: t, className: n, border: i = !0 } = e; return (0, a.jsx)("div", { className: "bg-white rounded-xl flex-col flex ".concat(n, " ").concat(i && "border border-gray-200"), children: t }) }, l = [{ day: "Monday", hours: "9:00 AM - 5:00 PM" }, { day: "Tuesday", hours: "9:00 AM - 5:00 PM" }, { day: "Wednesday", hours: "9:00 AM - 5:00 PM" }, { day: "Thursday", hours: "9:00 AM - 5:00 PM" }, { day: "Friday", hours: "9:00 AM - 5:00 PM" }, { day: "Saturday", hours: "Closed" }, { day: "Sunday", hours: "Closed" }]; var d = n(40156), o = n.n(d), u = n(84688), p = n.n(u), y = n(3612), c = n.n(y); o().extend(p()), o().extend(c()); let TradingSchedule = e => { let { onClose: t } = e, n = o()().tz("America/New_York"), i = n.format("dddd h:mm A"); return (0, a.jsx)("div", { className: "absolute top-0 left-0 z-10 w-full h-full", children: (0, a.jsxs)(Card, { className: "flex flex-col w-full h-full gap-6 p-6", border: !1, children: [(0, a.jsxs)("div", { className: "flex flex-col w-full h-full gap-6", children: [(0, a.jsx)("div", { className: "text-2xl font-bold text-trust", children: "Invest in USDX" }), (0, a.jsx)("div", { className: "text-base font-bold text-trust", children: "USDX Trading Hours" }), (0, a.jsx)("div", { children: l.map((e, t) => (0, a.jsxs)("div", { className: "flex flex-row text-sm text-gray-800", children: [(0, a.jsx)("div", { className: "font-bold w-28", children: e.day }), (0, a.jsx)("div", { className: "font-medium", children: e.hours })] }, t)) }), (0, a.jsxs)("div", { className: "text-sm font-medium text-gray-800", children: ["It is currently ", i, "."] }), (0, a.jsxs)("div", { className: "text-sm font-medium text-gray-800", children: [(0, a.jsxs)("p", { children: ["Trading is closed on all", " ", (0, a.jsx)("a", { className: "underline", href: "https://www.opm.gov/policy-data-oversight/pay-leave/federal-holidays/", target: "_blank", children: "US Federal Holidays" }), "."] }), (0, a.jsx)("p", { children: " All hours are listed in Eastern Time (ET)." })] })] }), (0, a.jsx)("div", { className: "font-sans text-xs font-medium text-gray-600 underline hover:cursor-pointer", onClick: () => t(), children: "Close Information" })] }) }) }; var m = n(29920); let x = [{ inputs: [{ internalType: "address", name: "_ytoken", type: "address" }, { internalType: "address", name: "_stable", type: "address" }, { internalType: "address", name: "_oracle", type: "address" }, { internalType: "address", name: "_holidays", type: "address" }, { internalType: "address", name: "_dst", type: "address" }, { internalType: "address", name: "_allowlist", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], name: "AfterHours", type: "error" }, { inputs: [], name: "BadAddress", type: "error" }, { inputs: [], name: "BadAmount", type: "error" }, { inputs: [{ internalType: "enum Holiday", name: "holiday", type: "uint8" }], name: "ClosedForHoliday", type: "error" }, { inputs: [], name: "ClosedForWeekend", type: "error" }, { inputs: [], name: "InvalidTradingWindow", type: "error" }, { inputs: [], name: "NoAccess", type: "error" }, { inputs: [], name: "NotPermissioned", type: "error" }, { inputs: [], name: "YearNotFound", type: "error" }, { inputs: [], name: "YearNotFound", type: "error" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "previousAdmin", type: "address" }, { indexed: !1, internalType: "address", name: "newAdmin", type: "address" }], name: "AdminChanged", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "beacon", type: "address" }], name: "BeaconUpgraded", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "from", type: "address" }, { indexed: !1, internalType: "uint256", name: "amount", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "paid", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "price", type: "uint256" }], name: "Bought", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "uint8", name: "version", type: "uint8" }], name: "Initialized", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "previousLp", type: "address" }, { indexed: !1, internalType: "address", name: "newLp", type: "address" }], name: "LiquidityProviderSet", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "previousOwner", type: "address" }, { indexed: !0, internalType: "address", name: "newOwner", type: "address" }], name: "OwnershipTransferred", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "from", type: "address" }, { indexed: !1, internalType: "uint256", name: "amount", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "received", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "fee", type: "uint256" }], name: "Sold", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "implementation", type: "address" }], name: "Upgraded", type: "event" }, { inputs: [], name: "allowlist", outputs: [{ internalType: "contract IAllowlist", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "buy", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }], name: "buyFor", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "dst", outputs: [{ internalType: "contract DaylightSavingsCalendar", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "fund", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "getHoliday", outputs: [{ internalType: "enum Holiday", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "holidays", outputs: [{ internalType: "contract HolidayCalendar", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_owner", type: "address" }, { internalType: "address", name: "_liquidityProvider", type: "address" }, { internalType: "uint256", name: "_startHour", type: "uint256" }, { internalType: "uint256", name: "_endHour", type: "uint256" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "isCoreTradingHours", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "isDST", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_year", type: "uint256" }, { internalType: "uint256", name: "_month", type: "uint256" }, { internalType: "uint256", name: "_day", type: "uint256" }], name: "isHoliday", outputs: [{ internalType: "enum Holiday", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "isHoliday", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "isTradingDay", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "liquidityProvider", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "marketIsOpen", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "oracle", outputs: [{ internalType: "contract IYieldTokenOracle", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proxiableUUID", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_ytokenAmount", type: "uint256" }, { internalType: "uint256", name: "_stableAmount", type: "uint256" }], name: "redeem", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "sell", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }], name: "sellFor", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "sellPreview", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "int256", name: "", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_liquidityProvider", type: "address" }], name: "setLiquidityProvider", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_startHour", type: "uint256" }, { internalType: "uint256", name: "_endHour", type: "uint256" }], name: "setTradingHours", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "stable", outputs: [{ internalType: "contract IERC20Metadata", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "state", outputs: [{ internalType: "enum TradingDays.State", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "time", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "tradingEndHour", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "tradingStartHour", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "newOwner", type: "address" }], name: "transferOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }], name: "upgradeTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "ytoken", outputs: [{ internalType: "contract IYieldToken", name: "", type: "address" }], stateMutability: "view", type: "function" }]; var f = n(67117), b = n(44677), h = n(24356), v = n(4284); let useWrappedContractReadFactory = function () { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; return t => (0, h.do)({ ...t, onSuccess: e => { var n; console.debug("contract read success", { functionName: null == t ? void 0 : t.functionName, data: e }), null == t || null === (n = t.onSuccess) || void 0 === n || n.call(t, e) }, onError: n => { var a, i; (null === (a = e.shouldSwallowError) || void 0 === a ? void 0 : a.call(e, n)) || (console.error("contract read error", { functionName: null == t ? void 0 : t.functionName, error: n, opts: e }), v.Tb(n), null == t || null === (i = t.onError) || void 0 === i || i.call(t, n)) } }) }, useUSYCTellerOpen = () => { let e = (0, h.xx)(), t = (0, r.useRef)(void 0), n = (0, r.useRef)(void 0), { data: a, isLoading: i } = useWrappedContractReadFactory()({ address: f.c1[(0, b.Rp)(e)], abi: x, functionName: "marketIsOpen", cacheOnBlock: !0, watch: !0 }), { data: s, isLoading: l } = useWrappedContractReadFactory()({ address: f.c1[(0, b.Rp)(e)], abi: x, functionName: "isCoreTradingHours", cacheOnBlock: !0, watch: !0 }); return t.current = void 0 === a ? t.current : a, n.current = void 0 !== s ? s : n.current, { marketIsOpen: t.current, isLoading: i, isCoreTradingHours: n.current, isCoreTradingHoursLoading: l } }; var T = n(10953); let useAccountOrOverride = () => { let e = (0, h.mA)(), t = (0, T.useSearchParams)(), n = t.get("view"); return n ? { address: n, isConnected: !0, isConnecting: !1, isDisconnected: !1, isReconnecting: !1, connector: {}, status: "connected", overridden: !0, removeOverride: () => { window.history.pushState({}, document.title, window.location.pathname), location.reload() } } : e }, useAddSentryContext = () => { let { overridden: e, address: t, status: n, isConnected: a } = useAccountOrOverride(); (0, r.useEffect)(() => { let a = { status: n, overridden: e, address: t }; console.debug("updating senty wallet context and user", a), v.v("wallet", a), v.av({ email: t, id: t }) }, [e, t, n, a]) }, g = [{ constant: !0, inputs: [], name: "name", outputs: [{ name: "", type: "string" }], payable: !1, stateMutability: "view", type: "function" }, { constant: !1, inputs: [{ name: "_spender", type: "address" }, { name: "_value", type: "uint256" }], name: "approve", outputs: [{ name: "", type: "bool" }], payable: !1, stateMutability: "nonpayable", type: "function" }, { constant: !0, inputs: [], name: "totalSupply", outputs: [{ name: "", type: "uint256" }], payable: !1, stateMutability: "view", type: "function" }, { constant: !1, inputs: [{ name: "_from", type: "address" }, { name: "_to", type: "address" }, { name: "_value", type: "uint256" }], name: "transferFrom", outputs: [{ name: "", type: "bool" }], payable: !1, stateMutability: "nonpayable", type: "function" }, { constant: !0, inputs: [], name: "decimals", outputs: [{ name: "", type: "uint8" }], payable: !1, stateMutability: "view", type: "function" }, { constant: !0, inputs: [{ name: "_owner", type: "address" }], name: "balanceOf", outputs: [{ name: "balance", type: "uint256" }], payable: !1, stateMutability: "view", type: "function" }, { constant: !0, inputs: [], name: "symbol", outputs: [{ name: "", type: "string" }], payable: !1, stateMutability: "view", type: "function" }, { constant: !1, inputs: [{ name: "_to", type: "address" }, { name: "_value", type: "uint256" }], name: "transfer", outputs: [{ name: "", type: "bool" }], payable: !1, stateMutability: "nonpayable", type: "function" }, { constant: !0, inputs: [{ name: "_owner", type: "address" }, { name: "_spender", type: "address" }], name: "allowance", outputs: [{ name: "", type: "uint256" }], payable: !1, stateMutability: "view", type: "function" }, { payable: !0, stateMutability: "payable", type: "fallback" }, { anonymous: !1, inputs: [{ indexed: !0, name: "owner", type: "address" }, { indexed: !0, name: "spender", type: "address" }, { indexed: !1, name: "value", type: "uint256" }], name: "Approval", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, name: "from", type: "address" }, { indexed: !0, name: "to", type: "address" }, { indexed: !1, name: "value", type: "uint256" }], name: "Transfer", type: "event" }], w = [{ inputs: [], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], name: "BadAddress", type: "error" }, { inputs: [], name: "Unauthorized", type: "error" }, { inputs: [], name: "WL_BadRole", type: "error" }, { inputs: [], name: "WL_Paused", type: "error" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "previousAdmin", type: "address" }, { indexed: !1, internalType: "address", name: "newAdmin", type: "address" }], name: "AdminChanged", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "beacon", type: "address" }], name: "BeaconUpgraded", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "uint8", name: "version", type: "uint8" }], name: "Initialized", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "previousOwner", type: "address" }, { indexed: !0, internalType: "address", name: "newOwner", type: "address" }], name: "OwnershipTransferred", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "account", type: "address" }], name: "Paused", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: !0, internalType: "address", name: "account", type: "address" }, { indexed: !0, internalType: "address", name: "sender", type: "address" }], name: "RoleGranted", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "bytes32", name: "role", type: "bytes32" }, { indexed: !0, internalType: "address", name: "account", type: "address" }, { indexed: !0, internalType: "address", name: "sender", type: "address" }], name: "RoleRevoked", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "account", type: "address" }], name: "Unpaused", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "implementation", type: "address" }], name: "Upgraded", type: "event" }, { inputs: [], name: "CLIENT_DOMESTIC_FEEDER", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "CLIENT_DOMESTIC_SDYF", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "CLIENT_INTERNATIONAL_FEEDER", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "CLIENT_INTERNATIONAL_SDYF", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "LP_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "OTC_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "SYSTEM_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "VAULT_ROLE", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "canUSYC", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_role", type: "bytes32" }, { internalType: "address", name: "_address", type: "address" }], name: "grantRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32[]", name: "_roles", type: "bytes32[]" }, { internalType: "address[]", name: "_addresses", type: "address[]" }], name: "grantRoleBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_role", type: "bytes32" }, { internalType: "address", name: "_address", type: "address" }], name: "hasRole", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_role", type: "bytes32" }, { internalType: "address", name: "_address", type: "address" }], name: "hasRoleAndNotSanctioned", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32[]", name: "_roles", type: "bytes32[]" }, { internalType: "address", name: "_address", type: "address" }], name: "hasRoleAndNotSanctionedBatch", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32[]", name: "_roles", type: "bytes32[]" }, { internalType: "address", name: "_address", type: "address" }], name: "hasRoleBatch", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "hasTokenPrivileges", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_owner", type: "address" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isAllowed", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isClient", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isClientDomesticFeeder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isClientDomesticSDYF", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isClientFeeder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isClientInternationalFeeder", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isClientInternationalSDYF", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isClientSDYF", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isCustomer", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isLP", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isOTC", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isSystem", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isSystemOrVault", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_address", type: "address" }], name: "isVault", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "pause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "paused", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "bytes32", name: "", type: "bytes32" }, { internalType: "address", name: "", type: "address" }], name: "permissions", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proxiableUUID", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32", name: "_role", type: "bytes32" }, { internalType: "address", name: "_address", type: "address" }], name: "revokeRole", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "bytes32[]", name: "_roles", type: "bytes32[]" }, { internalType: "address[]", name: "_addresses", type: "address[]" }], name: "revokeRoleBatch", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "sanctionsOracle", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_sanctionsOracle", type: "address" }], name: "setSanctionsOracle", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newOwner", type: "address" }], name: "transferOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "unpause", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }], name: "upgradeTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable", type: "function" }], C = [{ inputs: [], name: "CL_AggregatorNotSet", type: "error" }, { inputs: [], name: "CL_RoundIdTooSmall", type: "error" }, { inputs: [], name: "CL_StaleAnswer", type: "error" }, { inputs: [], name: "OC_CannotReportForFuture", type: "error" }, { inputs: [], name: "OC_DisputePeriodOver", type: "error" }, { inputs: [], name: "OC_GracePeriodNotOver", type: "error" }, { inputs: [], name: "OC_InvalidDisputePeriod", type: "error" }, { inputs: [], name: "OC_PriceDisputed", type: "error" }, { inputs: [], name: "OC_PriceNotReported", type: "error" }, { inputs: [], name: "OC_PriceReported", type: "error" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "base", type: "address" }, { indexed: !1, internalType: "address", name: "quote", type: "address" }, { indexed: !1, internalType: "uint256", name: "period", type: "uint256" }], name: "DisputePeriodUpdated", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "base", type: "address" }, { indexed: !1, internalType: "address", name: "quote", type: "address" }, { indexed: !1, internalType: "uint256", name: "expiry", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "price", type: "uint256" }, { indexed: !1, internalType: "bool", name: "isDispute", type: "bool" }], name: "ExpiryPriceSet", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "previousOwner", type: "address" }, { indexed: !0, internalType: "address", name: "newOwner", type: "address" }], name: "OwnershipTransferred", type: "event" }, { inputs: [{ internalType: "address", name: "", type: "address" }], name: "aggregators", outputs: [{ internalType: "address", name: "addr", type: "address" }, { internalType: "uint8", name: "decimals", type: "uint8" }, { internalType: "uint32", name: "maxDelay", type: "uint32" }, { internalType: "bool", name: "isStable", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }], name: "disputePeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_base", type: "address" }, { internalType: "address", name: "_quote", type: "address" }, { internalType: "uint256", name: "_expiry", type: "uint256" }, { internalType: "uint256", name: "_newPrice", type: "uint256" }], name: "disputePrice", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "", type: "address" }, { internalType: "address", name: "", type: "address" }, { internalType: "uint256", name: "", type: "uint256" }], name: "expiryPrices", outputs: [{ internalType: "bool", name: "isDisputed", type: "bool" }, { internalType: "uint64", name: "reportAt", type: "uint64" }, { internalType: "uint128", name: "price", type: "uint128" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_base", type: "address" }, { internalType: "address", name: "_quote", type: "address" }, { internalType: "uint256", name: "_expiry", type: "uint256" }], name: "getPriceAtExpiry", outputs: [{ internalType: "uint256", name: "price", type: "uint256" }, { internalType: "bool", name: "isFinalized", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_base", type: "address" }, { internalType: "address", name: "_quote", type: "address" }], name: "getSpotPrice", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_base", type: "address" }, { internalType: "address", name: "_quote", type: "address" }, { internalType: "uint256", name: "_expiry", type: "uint256" }], name: "isExpiryPriceFinalized", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "maxDisputePeriod", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_base", type: "address" }, { internalType: "address", name: "_quote", type: "address" }, { internalType: "uint256", name: "_expiry", type: "uint256" }, { internalType: "uint80", name: "_baseRoundId", type: "uint80" }, { internalType: "uint80", name: "_quoteRoundId", type: "uint80" }], name: "reportExpiryPrice", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_asset", type: "address" }, { internalType: "address", name: "_aggregator", type: "address" }, { internalType: "uint32", name: "_maxDelay", type: "uint32" }, { internalType: "bool", name: "_isStable", type: "bool" }], name: "setAggregator", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_base", type: "address" }, { internalType: "address", name: "_quote", type: "address" }, { internalType: "uint256", name: "_period", type: "uint256" }], name: "setDisputePeriod", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_base", type: "address" }, { internalType: "address", name: "_quote", type: "address" }, { internalType: "uint256", name: "_expiry", type: "uint256" }, { internalType: "uint256", name: "_price", type: "uint256" }], name: "setExpiryPriceBackup", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newOwner", type: "address" }], name: "transferOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }], j = [{ inputs: [{ internalType: "address", name: "_aggregator", type: "address" }, { internalType: "address", name: "_accessController", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "int256", name: "current", type: "int256" }, { indexed: !0, internalType: "uint256", name: "roundId", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "updatedAt", type: "uint256" }], name: "AnswerUpdated", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "uint256", name: "roundId", type: "uint256" }, { indexed: !0, internalType: "address", name: "startedBy", type: "address" }, { indexed: !1, internalType: "uint256", name: "startedAt", type: "uint256" }], name: "NewRound", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "from", type: "address" }, { indexed: !0, internalType: "address", name: "to", type: "address" }], name: "OwnershipTransferRequested", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "from", type: "address" }, { indexed: !0, internalType: "address", name: "to", type: "address" }], name: "OwnershipTransferred", type: "event" }, { inputs: [], name: "acceptOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "accessController", outputs: [{ internalType: "contract AccessControllerInterface", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "aggregator", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_aggregator", type: "address" }], name: "confirmAggregator", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "description", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_roundId", type: "uint256" }], name: "getAnswer", outputs: [{ internalType: "int256", name: "", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint80", name: "_roundId", type: "uint80" }], name: "getRoundData", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "int256", name: "answer", type: "int256" }, { internalType: "uint256", name: "startedAt", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }, { internalType: "uint80", name: "answeredInRound", type: "uint80" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_roundId", type: "uint256" }], name: "getTimestamp", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "latestAnswer", outputs: [{ internalType: "int256", name: "", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "latestRound", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "latestRoundData", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "int256", name: "answer", type: "int256" }, { internalType: "uint256", name: "startedAt", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }, { internalType: "uint80", name: "answeredInRound", type: "uint80" }], stateMutability: "view", type: "function" }, { inputs: [], name: "latestTimestamp", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address payable", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint16", name: "", type: "uint16" }], name: "phaseAggregators", outputs: [{ internalType: "contract AggregatorV2V3Interface", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "phaseId", outputs: [{ internalType: "uint16", name: "", type: "uint16" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_aggregator", type: "address" }], name: "proposeAggregator", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "proposedAggregator", outputs: [{ internalType: "contract AggregatorV2V3Interface", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint80", name: "_roundId", type: "uint80" }], name: "proposedGetRoundData", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "int256", name: "answer", type: "int256" }, { internalType: "uint256", name: "startedAt", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }, { internalType: "uint80", name: "answeredInRound", type: "uint80" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proposedLatestRoundData", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "int256", name: "answer", type: "int256" }, { internalType: "uint256", name: "startedAt", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }, { internalType: "uint80", name: "answeredInRound", type: "uint80" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_accessController", type: "address" }], name: "setController", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "_to", type: "address" }], name: "transferOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "version", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }], N = [{ inputs: [{ internalType: "address", name: "_ytoken", type: "address" }, { internalType: "uint8", name: "_decimals", type: "uint8" }, { internalType: "string", name: "_description", type: "string" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], name: "BadAmount", type: "error" }, { inputs: [], name: "Overflow", type: "error" }, { inputs: [], name: "RoundDataReported", type: "error" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "previousAdmin", type: "address" }, { indexed: !1, internalType: "address", name: "newAdmin", type: "address" }], name: "AdminChanged", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "uint80", name: "roundId", type: "uint80" }, { indexed: !1, internalType: "uint256", name: "balance", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "interest", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "price", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "updatedAt", type: "uint256" }], name: "BalanceReported", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "beacon", type: "address" }], name: "BeaconUpgraded", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "uint8", name: "version", type: "uint8" }], name: "Initialized", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "previousOwner", type: "address" }, { indexed: !0, internalType: "address", name: "newOwner", type: "address" }], name: "OwnershipTransferred", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "implementation", type: "address" }], name: "Upgraded", type: "event" }, { inputs: [], name: "decimals", outputs: [{ internalType: "uint8", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "description", outputs: [{ internalType: "string", name: "", type: "string" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint80", name: "_roundId", type: "uint80" }], name: "getRoundData", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "int256", name: "answer", type: "int256" }, { internalType: "uint256", name: "startedAt", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }, { internalType: "uint80", name: "answeredInRound", type: "uint80" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint80", name: "_roundId", type: "uint80" }], name: "getRoundDetails", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "uint256", name: "balance", type: "uint256" }, { internalType: "uint256", name: "interest", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_owner", type: "address" }, { internalType: "string", name: "_description", type: "string" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "latestRoundData", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "int256", name: "answer", type: "int256" }, { internalType: "uint256", name: "startedAt", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }, { internalType: "uint80", name: "answeredInRound", type: "uint80" }], stateMutability: "view", type: "function" }, { inputs: [], name: "latestRoundDetails", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }, { internalType: "uint256", name: "balance", type: "uint256" }, { internalType: "uint256", name: "interest", type: "uint256" }, { internalType: "uint256", name: "totalSupply", type: "uint256" }, { internalType: "uint256", name: "updatedAt", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "nextPrice", outputs: [{ internalType: "int256", name: "", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proxiableUUID", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_principal", type: "uint256" }, { internalType: "uint256", name: "_interest", type: "uint256" }, { internalType: "uint256", name: "_totalSupply", type: "uint256" }, { internalType: "int256", name: "_nextPrice", type: "int256" }], name: "reportBalance", outputs: [{ internalType: "uint80", name: "roundId", type: "uint80" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "string", name: "_description", type: "string" }], name: "setDescription", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newOwner", type: "address" }], name: "transferOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }], name: "upgradeTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "ytoken", outputs: [{ internalType: "contract IYieldToken", name: "", type: "address" }], stateMutability: "view", type: "function" }], S = [{ inputs: [{ internalType: "address", name: "_ytoken", type: "address" }, { internalType: "address", name: "_oracle", type: "address" }, { internalType: "address", name: "_holidays", type: "address" }, { internalType: "address", name: "_dst", type: "address" }, { internalType: "address", name: "_authority", type: "address" }], stateMutability: "nonpayable", type: "constructor" }, { inputs: [], name: "AfterHours", type: "error" }, { inputs: [], name: "BadAddress", type: "error" }, { inputs: [], name: "BadAmount", type: "error" }, { inputs: [{ internalType: "enum Holiday", name: "holiday", type: "uint8" }], name: "ClosedForHoliday", type: "error" }, { inputs: [], name: "ClosedForWeekend", type: "error" }, { inputs: [], name: "NotPermissioned", type: "error" }, { inputs: [], name: "YearNotFound", type: "error" }, { inputs: [], name: "YearNotFound", type: "error" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "address", name: "previousAdmin", type: "address" }, { indexed: !1, internalType: "address", name: "newAdmin", type: "address" }], name: "AdminChanged", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "uint256", name: "afterHourTrading", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "newAfterHourTrading", type: "uint256" }], name: "AfterHourTradingSet", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "beacon", type: "address" }], name: "BeaconUpgraded", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "from", type: "address" }, { indexed: !0, internalType: "address", name: "recipient", type: "address" }, { indexed: !1, internalType: "uint256", name: "amount", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "paid", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "price", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "fee", type: "uint256" }], name: "Bought", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "uint256", name: "buyFee", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "newBuyFee", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "sellFee", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "newSellFee", type: "uint256" }], name: "FeesSet", type: "event" }, { anonymous: !1, inputs: [{ indexed: !1, internalType: "uint8", name: "version", type: "uint8" }], name: "Initialized", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "previousOwner", type: "address" }, { indexed: !0, internalType: "address", name: "newOwner", type: "address" }], name: "OwnershipTransferred", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "from", type: "address" }, { indexed: !0, internalType: "address", name: "recipient", type: "address" }, { indexed: !1, internalType: "uint256", name: "amount", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "received", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "price", type: "uint256" }, { indexed: !1, internalType: "uint256", name: "fee", type: "uint256" }], name: "Sold", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "recipient", type: "address" }, { indexed: !0, internalType: "address", name: "token", type: "address" }, { indexed: !1, internalType: "uint256", name: "amount", type: "uint256" }], name: "Transferred", type: "event" }, { anonymous: !1, inputs: [{ indexed: !0, internalType: "address", name: "implementation", type: "address" }], name: "Upgraded", type: "event" }, { inputs: [], name: "afterHourTrading", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "authority", outputs: [{ internalType: "contract IAuthority", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "buy", outputs: [{ internalType: "uint256", name: "amount", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "buyFee", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }], name: "buyFor", outputs: [{ internalType: "uint256", name: "amount", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "buyPreview", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "int256", name: "", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [], name: "dst", outputs: [{ internalType: "contract DaylightSavingsCalendar", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "getHoliday", outputs: [{ internalType: "enum Holiday", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "holidays", outputs: [{ internalType: "contract HolidayCalendar", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_owner", type: "address" }, { internalType: "address", name: "_stable", type: "address" }, { internalType: "uint256", name: "_afterHourTrading", type: "uint256" }, { internalType: "uint256", name: "_buyFee", type: "uint256" }, { internalType: "uint256", name: "_sellFee", type: "uint256" }], name: "initialize", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "isCoreTradingHours", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "isDST", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_year", type: "uint256" }, { internalType: "uint256", name: "_month", type: "uint256" }, { internalType: "uint256", name: "_day", type: "uint256" }], name: "isHoliday", outputs: [{ internalType: "enum Holiday", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "isHoliday", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "isTradingDay", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "pure", type: "function" }, { inputs: [], name: "marketIsOpen", outputs: [{ internalType: "bool", name: "", type: "bool" }], stateMutability: "view", type: "function" }, { inputs: [], name: "oracle", outputs: [{ internalType: "contract IYieldTokenOracle", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "owner", outputs: [{ internalType: "address", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "proxiableUUID", outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }], stateMutability: "view", type: "function" }, { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "sell", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "sellFee", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }], name: "sellFor", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_amount", type: "uint256" }], name: "sellPreview", outputs: [{ internalType: "uint256", name: "", type: "uint256" }, { internalType: "uint256", name: "", type: "uint256" }, { internalType: "int256", name: "", type: "int256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "uint256", name: "_hour", type: "uint256" }], name: "setAfterHourTrading", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "uint256", name: "_buy", type: "uint256" }, { internalType: "uint256", name: "_sell", type: "uint256" }], name: "setFees", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [], name: "stable", outputs: [{ internalType: "contract IERC20Metadata", name: "", type: "address" }], stateMutability: "view", type: "function" }, { inputs: [], name: "state", outputs: [{ internalType: "enum TradingDays.State", name: "", type: "uint8" }], stateMutability: "view", type: "function" }, { inputs: [], name: "time", outputs: [{ internalType: "uint256", name: "", type: "uint256" }], stateMutability: "view", type: "function" }, { inputs: [{ internalType: "address", name: "_token", type: "address" }, { internalType: "uint256", name: "_amount", type: "uint256" }, { internalType: "address", name: "_recipient", type: "address" }], name: "transfer", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newOwner", type: "address" }], name: "transferOwnership", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }], name: "upgradeTo", outputs: [], stateMutability: "nonpayable", type: "function" }, { inputs: [{ internalType: "address", name: "newImplementation", type: "address" }, { internalType: "bytes", name: "data", type: "bytes" }], name: "upgradeToAndCall", outputs: [], stateMutability: "payable", type: "function" }, { inputs: [], name: "ytoken", outputs: [{ internalType: "contract IYieldToken", name: "", type: "address" }], stateMutability: "view", type: "function" }], M = "0x0000000000000000000000000000000000000000"; var _ = n(82956); let useOracleLatestPrice = e => { var t, n, a; let { networkId: i, tokenAddress: s } = e, l = (0, r.useRef)(), d = f.Fo[i], { data: u, isLoading: p } = useWrappedContractReadFactory()({ abi: C, address: d, chainId: (0, b.y_)(i), functionName: "aggregators", args: [s], cacheOnBlock: !0 }), y = null !== (t = u && u[0]) && void 0 !== t ? t : M, c = null !== (n = u && u[1]) && void 0 !== n ? n : 1, { data: m, isLoading: x, refetch: h } = useWrappedContractReadFactory()({ enabled: void 0 !== u && y !== M, abi: j, address: y, chainId: (0, b.y_)(i), functionName: "latestRoundData", cacheOnBlock: !0 }), v = void 0 === m ? l.current : { price: m[1], pricedOn: o()(1e3 * Number(m[3])), formattedPrice: (0, _.b)(null !== (a = m[1]) && void 0 !== a ? a : 0n, c), aggregatorAddress: y, aggregatorDecimals: c }; return l.current = v, { isLoading: x || p, data: v, refetch: h } }, useUSYCPrice = () => { var e; let t = null !== (e = (0, h.xx)()) && void 0 !== e ? e : 1, { isLoading: n, refetch: a, data: i } = useOracleLatestPrice({ networkId: (0, b.Rp)(t), tokenAddress: f.Zt[(0, b.Rp)(t)] }); return (0, h.y2)({ address: null == i ? void 0 : i.aggregatorAddress, abi: j, eventName: "NewRound", listener: e => { a() } }), { isLoading: n, data: i ? { ...i, usdStablecoinToUSYCConversion: BigInt(1) * BigInt(10) ** BigInt(2 * i.aggregatorDecimals) / i.price, usycToUSDStablecoinConversion: i.price } : void 0 } }; var I = n(99559); let formatBigDecimalTokenUnits = function (e) { let { maxDisplayDecimals: t, addSign: n } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (null == e) return "---"; let a = commify(e); if (n) { let t = Number(e); t > 0 && (a = "+" + a) } if (void 0 !== t) { let e = a.split("."), n = e[0], i = e[1]; "0" === n && i ? i.length > 8 && (a = "".concat(n, ".").concat(i.slice(0, 8), "...")) : a = "0" !== i && i && 0 !== t ? "".concat(n, ".").concat(i.slice(0, t)) : n } return a }, formatTokenUnits = function (e, t) { let { maxDisplayDecimals: n, addSign: a } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}; if (null == e) return "---"; let i = BigInt(e), s = commify((0, I.b)(i, t)); if (void 0 !== n) { let e = s.split("."), t = e[0], a = e[1]; "0" === t && a ? a.length > 8 && (s = "".concat(t, ".").concat(a.slice(0, 8), "...")) : s = "0" !== a && a && 0 !== n ? "".concat(t, ".").concat(a.slice(0, n)) : t } if (a) { let t = BigInt(e); t > BigInt(0) && (s = "+" + s) } return s }, formatUSDPrice = function (e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e => 2; return null === e || void 0 == e ? "0.00" : new Intl.NumberFormat("en-US", { maximumFractionDigits: t(e), minimumFractionDigits: t(e) }).format(Number(e)) }; function commify(e) { let t = String(e).split("."); if (isNaN(Number(e))) return "---"; if (t.length > 2 || !t[0].match(/^-?[0-9]*$/) || t[1] && !t[1].match(/^[0-9]*$/) || "." === e || "-." === e) throw Error("invalid value while commifying: ".concat(e)); let n = t[0], a = ""; for ("-" === n.substring(0, 1) && (a = "-", n = n.substring(1)); "0" === n.substring(0, 1);)n = n.substring(1); "" === n && (n = "0"); let i = ""; for (2 === t.length && (i = "." + (t[1] || "0")); i.length > 2 && "0" === i[i.length - 1];)i = i.substring(0, i.length - 1); let s = []; for (; n.length;) { if (n.length <= 3) { s.unshift(n); break } { let e = n.length - 3; s.unshift(n.substring(e)), n = n.substring(0, e) } } return a + s.join(",") + i } let useUSYCAUM = () => { var e, t, n, a, i; let s = null !== (n = (0, h.xx)()) && void 0 !== n ? n : 1, r = f.xd[s]; console.debug({ currentEthereumChainId: s, cantoChainId: r }); let l = useUSYCPrice(), { data: d, isLoading: o } = useWrappedContractReadFactory()({ abi: g, address: f.Zt[(0, b.Rp)(s)], functionName: "totalSupply", chainId: s }), u = BigInt(0), p = (null !== (a = null === (e = l.data) || void 0 === e ? void 0 : e.price) && void 0 !== a ? a : BigInt(0)) * ((null != d ? d : BigInt(0)) + (null != u ? u : BigInt(0))), y = { isLoading: o || l.isLoading, data: { usycAUM: p, usycAUMFormatted: formatTokenUnits(p, (null !== (i = null === (t = l.data) || void 0 === t ? void 0 : t.aggregatorDecimals) && void 0 !== i ? i : 0) + 6, { maxDisplayDecimals: 2 }) } }; return y }, ConfirmationScreen = e => { let { children: t, onClose: n } = e; return (0, a.jsx)("div", { className: "absolute top-0 left-0 z-10 w-full h-full bg-white", children: (0, a.jsx)("div", { className: "flex flex-col w-full h-full px-6 pt-6", children: (0, a.jsxs)("div", { className: "flex flex-col items-center justify-center gap-3 text-center text-gray-800 grow", children: [t, (0, a.jsx)("button", { className: "w-full p-3 text-lg font-medium text-center text-gray-800 rounded-lg bg-steel-50", onClick: n, children: "Close" })] }) }) }) }, GreenCheckmarkIcon = () => (0, a.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "60", height: "60", viewBox: "0 0 60 60", fill: "none", children: [(0, a.jsx)("circle", { cx: "30", cy: "30", r: "30", fill: "#059669" }), (0, a.jsx)("path", { d: "M14.0002 27.7653L24.952 41.7721C25.0461 41.8924 25.2252 41.901 25.3303 41.7902L46.0002 20.0006", stroke: "white", strokeWidth: "3", strokeLinecap: "round" })] }), getSrc = e => { let t = ["WBTC", "WETH"].includes(e.toUpperCase()) ? e.substring(1) : e.startsWith("hn") || e.startsWith("ls") ? e.substring(2) : e; return "/icons/".concat(t.toLowerCase(), ".svg") }; var Icons_CurrencyIcon = e => { let { currency: t, width: n, height: i } = e, [l, d] = (0, r.useState)(getSrc(t.toLowerCase())); return (0, r.useEffect)(() => { d(getSrc(t)) }, [t]), (0, a.jsx)(s(), { style: { display: "inline" }, onError: () => d(getSrc("unknown")), alt: t.toUpperCase(), src: l, height: i, width: n }) }; let CircleDownArrowIcon = () => (0, a.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", children: [(0, a.jsx)("circle", { cx: "12", cy: "12", r: "11.5", fill: "white", stroke: "#E5E7EB" }), (0, a.jsx)("path", { d: "M17 12.8571L12 17.8571M12 17.8571L7 12.8571M12 17.8571V7", stroke: "#374151", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" })] }); var A = n(44019), k = n(2394), O = n(61945); let R = { right: -90, left: 90, up: 180, down: 0 }, ArrowIcon = e => { let { direction: t, className: n } = e; return (0, a.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", className: null != n ? n : "w-6 h-6", transform: "rotate(".concat(R[t], ")"), children: (0, a.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 8.25l-7.5 7.5-7.5-7.5" }) }) }, TokenSelector = e => { let { onChange: t, value: n, collaterals: i } = e; return (0, a.jsx)("div", { className: "w-[136px]", children: (0, a.jsx)(k.R, { value: n, onChange: t, children: e => { let { open: t } = e; return (0, a.jsxs)("div", { className: "relative flex flex-col w-[136px]", children: [(0, a.jsx)(k.R.Button, { className: "flex justify-between w-full p-2 border border-gray-300 rounded-lg", children: (0, a.jsxs)("div", { className: "flex flex-row items-center w-full gap-2", children: [(0, a.jsx)(Icons_CurrencyIcon, { currency: n, width: 20, height: 20 }), (0, a.jsxs)("div", { className: "flex text-xl font-medium grow", children: [" ", n] }), (0, a.jsx)(ArrowIcon, { className: "w-4 h-4 transition-transform ".concat(t ? "rotate-180" : ""), direction: "down" })] }) }), (0, a.jsx)(O.u, { as: r.Fragment, leave: "transition ease-in duration-100", leaveFrom: "opacity-100", leaveTo: "opacity-0", children: (0, a.jsx)(k.R.Options, { className: "absolute z-20 w-full mr-1 bg-white border border-gray-300 rounded-lg top-full", children: i.map(e => (0, a.jsx)(k.R.Option, { value: e, children: t => { let { selected: n } = t; return (0, a.jsxs)("div", { className: "flex flex-row p-2 items-center hover:bg-gray-200 hover:cursor-pointer gap-1 ".concat(n ? "font-bold" : ""), children: [(0, a.jsx)(Icons_CurrencyIcon, { currency: e, width: 20, height: 20 }), e] }) } }, e)) }) })] }) } }) }) }, SwapArrowIcon = () => (0, a.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "13", height: "13", viewBox: "0 0 13 13", fill: "none", children: (0, a.jsx)("path", { d: "M1 1.00125V4.33459H1.388M1.388 4.33459C1.83057 3.24001 2.62379 2.32319 3.64335 1.72783C4.66292 1.13246 5.8512 0.892196 7.02198 1.04468C8.19276 1.19717 9.27986 1.73378 10.1129 2.57044C10.946 3.40709 11.4779 4.4965 11.6253 5.66792M1.388 4.33459H4.33333M11.6667 11.6679V8.33459H11.2793M11.2793 8.33459C10.8361 9.42853 10.0427 10.3446 9.02322 10.9394C8.00376 11.5343 6.81583 11.7743 5.6454 11.6218C4.47497 11.4694 3.38813 10.9332 2.55502 10.0971C1.72191 9.26097 1.18957 8.17222 1.04133 7.00125M11.2793 8.33459H8.33333", stroke: "#6B7280", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }) }), ConversionRateDisplayV2 = e => { let { usycPrice: t, usycToStablecoin: n, collateral: i, swapDefaultView: s = !1 } = e, [l, d] = (0, r.useState)(s); return (0, a.jsxs)("div", { className: "flex flex-row justify-between text-sm font-medium text-gray-500", children: [(0, a.jsx)("span", { children: "Rate" }), (0, a.jsxs)("div", { className: "flex flex-row items-center gap-2", children: [t ? (0, a.jsx)(a.Fragment, { children: l ? (0, a.jsxs)("span", { className: "font-inter", children: ["1 ", i, " ≈ ", formatTokenUnits(t, 8), " USDX"] }) : (0, a.jsxs)("span", { className: "font-inter", children: ["1 USDX ≈ ", formatTokenUnits(n, 8), " ", i] }) }) : (0, a.jsx)("div", { className: "w-48 h-4 bg-gray-300 rounded animate-pulse" }), (0, a.jsx)("div", { className: "hover:cursor-pointer", onClick: () => d(!l), children: (0, a.jsx)(SwapArrowIcon, {}) })] })] }) }, FundSwapInputV2 = e => { let { inputCurrency: t, outputCurrency: n, inputTokenBalance: i, inputTokenBalanceDecimals: s, inputToOutputConversion: l, outputToInputConversion: d, outputAmount: o, setInputAmount: u, onFundTokenChange: p } = e, [y, c] = (0, r.useState)(""), handleInputMax = () => { l && d && (c((0, _.b)(i, s)), u(i)) }; return (0, a.jsxs)("div", { className: "flex flex-col pt-6 pb-3", children: [(0, a.jsxs)("div", { className: "flex flex-col w-full gap-5 p-5 border border-gray-200 rounded", children: [(0, a.jsxs)("div", { className: "flex flex-row justify-between text-sm font-medium text-gray-500", children: [(0, a.jsxs)("div", { className: "flex flex-row gap-2", children: [(0, a.jsx)("span", { children: "Balance" }), (0, a.jsx)("div", { className: "hover:cursor-pointer hover:text-white hover:bg-gray-400 text-gray-500 text-xs font-bold leading-none h-5 px-2 py-0.5 rounded-[20px] border border-gray-400", onClick: () => handleInputMax(), children: "MAX" })] }), (0, a.jsx)("span", { className: "font-inter", children: (0, _.b)(i, s) })] }), (0, a.jsxs)("div", { className: "flex flex-row items-center pb-2", children: [(0, a.jsx)(TokenSelector, { onChange: p, value: t, collaterals: f.j0 }), (0, a.jsx)("div", { children: (0, a.jsx)("input", { type: "text", className: "w-full font-medium text-right text-gray-800 placeholder-gray-400 bg-transparent border-0 text-md sm:text-xl font-inter focus:outline-none focus:ring-0", placeholder: "0.00", value: y, onChange: e => { if (!l || !d) return; let t = e.target.value; if (/^\d*\.?\d{0,8}$/.test(t) && t.length <= 18) { c(t); let e = (0, A.v)(t, s); u(e) } } }) })] })] }), (0, a.jsx)("div", { className: "relative flex items-center justify-center h-2", children: (0, a.jsx)(CircleDownArrowIcon, {}) }), (0, a.jsxs)("div", { className: "flex flex-col w-full gap-5 p-5 border border-gray-200 rounded", children: [(0, a.jsx)(ConversionRateDisplayV2, { collateral: t, usycPrice: l, usycToStablecoin: d, swapDefaultView: !0 }), (0, a.jsxs)("div", { className: "flex flex-row justify-between pb-2", children: [(0, a.jsxs)("div", { className: "flex flex-row justify-center", children: [(0, a.jsx)("div", { className: "hidden w-6 h-6 sm:block", children: (0, a.jsx)(Icons_CurrencyIcon, { currency: n, width: 24, height: 24 }) }), (0, a.jsx)("div", { className: "mr-2 font-medium text-gray-800 sm:ml-1 text-md sm:text-xl", children: n })] }), (0, a.jsx)("div", { className: "w-full font-medium text-right text-gray-800 placeholder-gray-400 bg-transparent border-0 text-md sm:text-xl font-inter focus:outline-none focus:ring-0", children: (0, a.jsx)("span", { children: o || "0" }) })] })] })] }) }; var U = n(22804); let OnboardButton = e => { let { className: t } = e, [n, i] = (0, r.useState)(!1), closeDialog = () => { i(!1) }; return (0, a.jsxs)("div", { children: [(0, a.jsx)("div", { className: t || "w-full p-3 text-lg font-medium text-center text-gray-600 bg-white border rounded-lg border-slate-400 hover:cursor-pointer", onClick: () => { i(!0) }, children: "Contact us to get access" }), (0, a.jsx)(U.V, { as: "div", className: "fixed inset-0 z-10 overflow-y-auto", open: n, onClose: closeDialog, children: (0, a.jsxs)("div", { className: "flex items-center justify-center min-h-screen", children: [(0, a.jsx)(U.V.Overlay, { className: "fixed inset-0 bg-black opacity-30" }), (0, a.jsxs)("div", { className: "relative max-w-md p-10 bg-white rounded-lg", children: [(0, a.jsx)(U.V.Title, { className: "text-xl font-medium text-gray-800", children: "Contact Us" }), (0, a.jsxs)(U.V.Description, { className: "my-10 text-gray-800", children: ["Contact us at", " ", (0, a.jsx)("a", { className: "focus:outline-none focus:ring-0", href: "mailto:alex@alexandros-securities.com", children: (0, a.jsx)("u", { children: "alex@alexandros-securities.com" }) }), " ", "to start onboarding."] }), (0, a.jsx)("div", { className: "w-full h-11 p-2.5 bg-black justify-center items-center gap-2.5 inline-flex cursor-pointer text-white font-bold", onClick: closeDialog, children: "Close" })] })] }) })] }) }, LoadingSpinner = () => (0, a.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", className: "animate-spin", width: "30", height: "30", viewBox: "0 0 30 30", fill: "none", children: [(0, a.jsx)("path", { d: "M15 3.75C21.2133 3.75 26.25 8.7868 26.25 15C26.25 21.2133 21.2133 26.25 15 26.25C8.7868 26.25 3.75 21.2133 3.75 15C3.75 8.7868 8.7868 3.75 15 3.75Z", stroke: "#002855", strokeOpacity: "0.3", strokeWidth: "3", strokeLinecap: "round" }), (0, a.jsx)("path", { d: "M15 3.75C21.2133 3.75 26.25 8.7868 26.25 15", stroke: "#002855", strokeWidth: "3", strokeLinecap: "round" })] }), WidgetButton = e => { let { className: t, children: n, onClick: i, disabled: s } = e; return (0, a.jsx)("button", { className: "w-full p-3 text-lg font-medium text-center text-gray-800 rounded-lg bg-adept disabled:bg-gray-200 disabled:text-gray-400 $", onClick: i, disabled: s, children: n }) }, useUSYCTellerPermission = () => { let e = (0, r.useRef)(!1), t = (0, h.xx)(), { address: n } = useAccountOrOverride(), { data: a } = useWrappedContractReadFactory()({ address: f.c1[(0, b.Rp)(t)], abi: x, functionName: "allowlist", chainId: t, enabled: !!n, cacheOnBlock: !0, watch: !0 }), { data: i } = useWrappedContractReadFactory()({ abi: w, functionName: "canUSYC", address: a, chainId: t, enabled: !!n, args: [null != n ? n : "0x"], cacheOnBlock: !0, watch: !0 }), s = void 0 === i ? e.current : i; return e.current = s, { hasAccess: s } }; var D = n(38393); let B = ["User rejected the request", "User denied transaction signature"], useWrappedContractWriteFactory = function () { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; return t => (0, h.GG)({ onSuccess: (n, a, i) => { var s; console.debug("contract write success", { result: n, label: e.label, functionName: null == t ? void 0 : t.functionName }), v.n_({ category: "transactions", message: "contract write success", data: n, level: 4 }), null === (s = t.onSuccess) || void 0 === s || s.call(t, n, a, i) }, onError: (n, a, i) => { var s; if (console.trace("contract write error", { error: n, label: e.label, functionName: null == t ? void 0 : t.functionName }), "message" in n && B.some(e => n.message.includes(e))) { console.debug("skipping sentry capture"); return } v.Tb(n), null === (s = t.onError) || void 0 === s || s.call(t, n, a, i) }, ...t }) }, useWrappedPrepareContractWriteFactory = function () { let e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; return t => (0, h.PJ)({ onSuccess: n => { let a = "prepare contract write success".concat(e.label && ": ".concat(e.label)); console.debug(a, { result: n, label: e.label, functionName: null == t ? void 0 : t.functionName }), v.n_({ category: "transactions", message: a, data: n, level: 4 }) }, onError: n => { let a = "prepare contract write error".concat(e.label && ": ".concat(e.label)); console.error(a, { error: n, label: e.label, functionName: null == t ? void 0 : t.functionName }), v.Tb(n) }, ...t }) }, useAllowance = e => { let { tokenAddress: t, spenderAddress: n, chainId: a, enabled: i, onApproveConfirmation: s, allowanceRequired: r } = e, { address: l } = useAccountOrOverride(), { chain: d } = (0, h.LN)(), o = !!((void 0 === i || !0 === i) && l && t && n && a && (null == d ? void 0 : d.id) === a), { data: u, isLoading: p, refetch: y } = useWrappedContractReadFactory()({ enabled: o, watch: !0, abi: D.em, address: t, cacheTime: 1e3, chainId: a, functionName: "allowance", args: [null != l ? l : "0x", null != n ? n : "0x"] }), { config: c } = useWrappedPrepareContractWriteFactory({ label: "useAllowance token approve" })({ enabled: o, chainId: a, address: t, abi: D.em, functionName: "approve", args: [null != n ? n : "0x", null != r ? r : BigInt(0)] }), { write: m, isLoading: x, data: f } = useWrappedContractWriteFactory({ label: "useAllowance token approve" })(c), { isLoading: b } = (0, h.BX)({ chainId: a, hash: null == f ? void 0 : f.hash, onSuccess: async e => { console.debug("allowance approval confirmed", e), y(), null == s || s() } }); return t && n && a ? { allowance: null != u ? u : BigInt(0), isFetchingAllowance: p, write: m, confirming: b, refetch: y, waitingForSignature: x } : { allowance: BigInt(0), write: void 0, isFetchingAllowance: !1, confirming: !1, refetch: void 0, waitingForSignature: !1 } }; var L = n(27735); let useUSYCTellerUSDCApproval = e => { let { collateral: t, allowanceRequired: n, onApproveConfirmation: a } = e, i = (0, h.xx)(), s = (0, b.Rp)(i), { address: r } = useAccountOrOverride(), { allowance: l, write: d, confirming: o, waitingForSignature: u } = useAllowance({ chainId: i, spenderAddress: f.rN[t][s], tokenAddress: (0, L.$T)(t, i), allowanceRequired: null != n ? n : BigInt(0), enabled: !!r, onApproveConfirmation: a }); return { allowance: l, write: d, confirming: o, waitingForSignature: u } }, useUSYCTellerBuy = e => { let { collateralAmount: t, collateral: n, onConfirmation: a } = e, i = (0, h.xx)(), { address: s } = useAccountOrOverride(), { data: r, isError: l, error: d, refetch: o, isRefetching: u } = useWrappedPrepareContractWriteFactory({ label: "buy usyc" })({ address: f.rN[n][(0, b.Rp)(i)], account: s, abi: x, functionName: "buy", chainId: i, enabled: !!s && !!t, args: [null != t ? t : BigInt(0)] }), { write: p, isError: y, error: c, isLoading: m, data: v } = useWrappedContractWriteFactory()({ ...r }), { isLoading: T } = (0, h.BX)({ chainId: i, hash: null == v ? void 0 : v.hash, onSuccess: async () => { null == a || a(), o() } }), { data: g } = (0, h.Ov)({ chainId: i }), { confirming: w } = useUSYCTellerUSDCApproval({ collateral: n, allowanceRequired: t, onApproveConfirmation: o }); return { buyUSYC: p, isPrepareError: l, prepareError: d, isWriteError: y, writeError: c, isWaitingForSignature: m, isConfirming: T } }, ProcessingScreen = e => { let { children: t } = e; return (0, a.jsx)("div", { className: "absolute top-0 left-0 z-10 w-full h-full bg-white", children: (0, a.jsxs)("div", { className: "flex flex-col w-full h-full px-6 pt-6", children: [(0, a.jsx)("div", { className: "flex flex-col justify-center text-center text-gray-800 grow", children: t }), (0, a.jsx)("div", { className: "flex self-end justify-center w-full p-3 text-lg font-medium text-center text-gray-800 rounded-lg bg-steel50", children: (0, a.jsx)(LoadingSpinner, {}) })] }) }) }, reducer = (e, t) => t, USYCTellerBuyButton = e => { let { buyAmount: t, collateral: n, chainID: i, showConfirmationScreen: s, spendingBalance: l } = e, { hasAccess: d } = useUSYCTellerPermission(), { marketIsOpen: o } = useUSYCTellerOpen(), { isConnected: u, isDisconnected: p, isConnecting: y } = useAccountOrOverride(), { isFullyConnected: c } = (0, m.SX)(), { allowance: x, write: f, waitingForSignature: b, confirming: h } = useUSYCTellerUSDCApproval({ collateral: n, allowanceRequired: t }), { buyUSYC: v, isWriteError: T, writeError: g, isWaitingForSignature: w, isConfirming: C } = useUSYCTellerBuy({ collateralAmount: t, collateral: n }), [j, N] = (0, r.useReducer)(reducer, "LOADING"); switch ((0, r.useEffect)(() => { if (!d) { N("NOT_PERMISSIONED"); return } if (y || c && p) { N("LOADING"); return } if (w || b) { N("AWAITING_SIGNATURE"); return } if (h) { N("LOADING"); return } if (t > 0 && (!x || t > x)) { N("USDC_ALLOWANCE_TOO_LOW"); return } if (C) { s(!0), N("BUY_CONFIRMING"); return } N("BUY_OK") }, [u, i, d, n, o, w, b, h, t, x, C, s, y, p, c]), j) { case "LOADING": case "AWAITING_SIGNATURE": return (0, a.jsx)("div", { className: "flex self-end justify-center w-full p-3 text-lg font-medium text-center text-gray-800 rounded-lg bg-steel50", children: (0, a.jsx)(LoadingSpinner, {}) }); case "NOT_PERMISSIONED": return (0, a.jsx)("div", { className: "flex flex-col gap-3", children: (0, a.jsx)(OnboardButton, {}) }); case "USDC_ALLOWANCE_TOO_LOW": return (0, a.jsxs)("div", { className: "flex flex-col gap-3", children: [(0, a.jsxs)("div", { className: "text-sm font-medium text-red-500", children: ["The approved ", n, " spending cap must be greater than or equal to the funding amount."] }), (0, a.jsxs)(WidgetButton, { onClick: () => null == f ? void 0 : f(), children: ["Approve ", n] })] }); case "BUY_CONFIRMING": return (0, a.jsxs)(ProcessingScreen, { children: [(0, a.jsx)("div", { className: "font-bold", children: "Funding Initiated." }), (0, a.jsx)("div", { children: "Now Minting USDX." })] }); case "BUY_OK": return (0, a.jsxs)("div", { className: "flex flex-col gap-3", children: [l < t ? (0, a.jsx)("div", { className: "text-sm font-medium text-red-500", children: (0, a.jsxs)("p", { children: ["Your ", n, " balance is insufficient to fund the requested amount."] }) }) : T ? (0, a.jsx)("div", { className: "text-sm font-medium text-red-500", children: (0, a.jsxs)("p", { children: ["There was an error in processing your request. Our team has been notified:", " ", null == g ? void 0 : g.message] }) }) : null, (0, a.jsx)(WidgetButton, { onClick: () => null == v ? void 0 : v(), disabled: !t || t === BigInt(0) || l < t, children: "Add Funds" })] }) } }, useUSYCTellerUSYCApproval = e => { let { collateral: t, allowanceRequired: n } = e, a = (0, h.xx)(), i = (0, b.Rp)(a), { address: s } = useAccountOrOverride(), { allowance: r, write: l, confirming: d, waitingForSignature: o } = useAllowance({ chainId: a, spenderAddress: f.rN[t][i], tokenAddress: f.Zt[i], allowanceRequired: null != n ? n : BigInt(0), enabled: !!s }); return { allowance: r, write: l, confirming: d, waitingForSignature: o } }, useUSYCTellerSell = e => { let { collateral: t, usycSellAmount: n, onConfirmation: a } = e, i = (0, h.xx)(), { address: s } = useAccountOrOverride(), { data: l, isError: d, error: o, refetch: u, isRefetching: p } = useWrappedPrepareContractWriteFactory({ label: "sell usyc" })({ address: f.rN[t][(0, b.Rp)(i)], account: s, abi: S, functionName: "sell", chainId: i, enabled: !!s && !!n, args: [null != n ? n : BigInt(0)] }), { write: y, isError: c, error: m, isLoading: x, data: v } = useWrappedContractWriteFactory()({ ...l }), { isLoading: T } = (0, h.BX)({ chainId: i, hash: null == v ? void 0 : v.hash, onSuccess: async () => { null == a || a() } }), { data: g } = (0, h.Ov)({ chainId: i }), { confirming: w } = useUSYCTellerUSYCApproval({ collateral: t, allowanceRequired: n }); return (0, r.useEffect)(() => { n && !p && u() }, [g, w]), { sellUSYC: y, isPrepareError: d, prepareError: o, isWriteError: c, writeError: m, isWaitingForSignature: x, isConfirming: T } }, USYCTellerSellButton_reducer = (e, t) => t, USYCTellerSellButton = e => { var t, n, i, s; let { sellAmount: l, collateral: d, chainID: o, expectedOutputAmount: u, showConfirmationScreen: p, spendingBalance: y } = e, { hasAccess: c } = useUSYCTellerPermission(), { marketIsOpen: x } = useUSYCTellerOpen(), { isConnected: v, isDisconnected: T, isConnecting: g } = useAccountOrOverride(), { isFullyConnected: w } = (0, m.SX)(), { allowance: C, write: j, waitingForSignature: N, confirming: S } = useUSYCTellerUSYCApproval({ collateral: d, allowanceRequired: l }), { sellUSYC: M, isPrepareError: _, isWriteError: I, writeError: A, isWaitingForSignature: k, isConfirming: O } = useUSYCTellerSell({ usycSellAmount: l, collateral: d }), R = (0, h.KQ)({ address: f.rN[d][(0, b.Rp)(o)], token: (0, L.$T)(d, o), chainId: o }), [U, D] = (0, r.useReducer)(USYCTellerSellButton_reducer, "LOADING"); switch ((0, r.useEffect)(() => { if (g || w && T) { D("LOADING"); return } if (k || N) { D("AWAITING_SIGNATURE"); return } if (S) { D("LOADING"); return } if (l > 0 && (!C || l > C)) { D("USYC_ALLOWANCE_TOO_LOW"); return } if (O) { p(!0), D("SELL_CONFIRMING"); return } D("SELL_OK") }, [v, o, c, x, k, N, S, l, C, O, null === (t = R.data) || void 0 === t ? void 0 : t.value, p, g, T, w]), U) { case "LOADING": case "AWAITING_SIGNATURE": return (0, a.jsx)("div", { className: "flex self-end justify-center w-full p-3 text-lg font-medium text-center text-gray-800 rounded-lg bg-steel50", children: (0, a.jsx)(LoadingSpinner, {}) }); case "USYC_ALLOWANCE_TOO_LOW": return (0, a.jsxs)("div", { className: "flex flex-col gap-3", children: [(0, a.jsx)("div", { className: "text-sm font-medium text-red-500", children: "The approved USDX spending cap must be greater than or equal to the redeem amount." }), (0, a.jsx)(WidgetButton, { onClick: () => null == j ? void 0 : j(), children: "Approve USDX" })] }); case "SELL_CONFIRMING": return (0, a.jsxs)(ProcessingScreen, { children: [(0, a.jsx)("div", { className: "font-bold", children: " Redemption Initiated." }), (0, a.jsx)("div", { children: "Now Redeeming USDX." })] }); case "SELL_OK": return (0, a.jsxs)("div", { className: "flex flex-col gap-3", children: [y < l ? (0, a.jsx)("div", { className: "text-sm font-medium text-red-500", children: (0, a.jsx)("p", { children: "Your USDX balance is insufficient to redeem the requested amount." }) }) : u && (null === (n = R.data) || void 0 === n ? void 0 : n.value) && (null === (i = R.data) || void 0 === i ? void 0 : i.value) < u ? (0, a.jsxs)("div", { className: "text-sm font-medium text-red-500", children: [(0, a.jsxs)("p", { children: ["The ", d, " redemption amount exceeds the current available supply (", formatTokenUnits(null === (s = R.data) || void 0 === s ? void 0 : s.value, 6), " ", d, ").", " "] }), (0, a.jsxs)("p", { children: ["Please try again later or contact us at", " ", (0, a.jsx)("a", { href: "mailto:alex@alexandros-securities.com", className: "text-blue-500 underline", children: "alex@alexandros-securities.com" }), " ", "if you need further assistance."] })] }) : I ? (0, a.jsx)("div", { className: "text-sm font-medium text-red-500", children: (0, a.jsxs)("p", { children: ["There was an error in processing your request. Our team has been notified:", " ", null == A ? void 0 : A.message] }) }) : null, (0, a.jsx)(WidgetButton, { onClick: () => null == M ? void 0 : M(), disabled: !l || l === BigInt(0) || y < l, children: "Redeem Funds" })] }) } }, useUSYCTellerPermissionV2 = () => ({ hasAccess: !0 }), USYCTellerButtonSwitchV2_reducer = (e, t) => t, E = [1, 11155111], USYCTellerButtonSwitchV2 = e => { let { mode: t, buyOrSellAmount: n, collateralToken: i, chainID: s, expectedOutputAmount: l, showConfirmationScreen: d, spendingBalance: o } = e, { hasAccess: u } = useUSYCTellerPermissionV2(), { marketIsOpen: p } = useUSYCTellerOpen(), { isConnected: y, isDisconnected: c, isConnecting: x } = useAccountOrOverride(), { isFullyConnected: f } = (0, m.SX)(), [b, h] = (0, r.useReducer)(USYCTellerButtonSwitchV2_reducer, "LOADING"); switch ((0, r.useEffect)(() => { let check = async () => { if (console.debug({ isConnected: y, isConnecting: x, isFullyConnected: f, isDisconnected: c }), x || f && c) { h("LOADING"); return } if (c) { h("WALLET_NOT_CONNECTED"); return } if (s && !1 === E.includes(s)) { h("REQUIRES_NETWORK_SWITCH"); return } if (!0 !== u) { h("NOT_ONBOARDED"); return } if (!1 === p && "USDC" === i) { h("MARKET_CLOSED"); return } if ("buy" === t) { h("BUY_OK"); return } if ("sell" === t) { h("SELL_OK"); return } h("LOADING") }; check() }, [i, y, s, u, p, t, n, d, x, c, f]), b) { case "LOADING": case "REQUIRES_NETWORK_SWITCH": return (0, a.jsx)("div", { className: "flex self-end justify-center w-full p-3 text-lg font-medium text-center text-gray-800 rounded-lg bg-steel50", children: (0, a.jsx)(LoadingSpinner, {}) }); case "WALLET_NOT_CONNECTED": return (0, a.jsxs)("div", { className: "flex flex-col gap-3", children: [(0, a.jsx)(m.oP, { buttonClassName: "w-full", children: (0, a.jsx)("div", { className: "w-full p-3 text-lg font-medium text-center text-gray-800 rounded-lg bg-adept", children: "Connect your wallet" }) }), (0, a.jsx)(OnboardButton, {})] }); case "NOT_ONBOARDED": return (0, a.jsx)(OnboardButton, {}); case "MARKET_CLOSED": return (0, a.jsx)(WidgetButton, { disabled: !0, children: "Market is Currently Closed" }); case "BUY_OK": return (0, a.jsx)(USYCTellerBuyButton, { buyAmount: n, collateral: i, chainID: s, showConfirmationScreen: d, spendingBalance: o }); case "SELL_OK": return (0, a.jsx)(USYCTellerSellButton, { collateral: i, sellAmount: n, chainID: s, expectedOutputAmount: l, showConfirmationScreen: d, spendingBalance: o }) } }, useUSYCTellerBuyPreview = e => { var t, n, a; let { tokenSymbol: i, tokenAmount: s = 10000000n } = e, l = (0, h.xx)(), { data: d, refetch: o, isFetching: u } = useWrappedContractReadFactory()({ abi: S, chainId: l, address: f.rN[i][(0, b.Rp)(l)], functionName: "buyPreview", args: [s] }), p = null !== (t = null == d ? void 0 : d[0]) && void 0 !== t ? t : 0n, y = null !== (n = null == d ? void 0 : d[1]) && void 0 !== n ? n : 0n, c = null !== (a = null == d ? void 0 : d[2]) && void 0 !== a ? a : 0n, { data: m } = (0, h.Ov)({ chainId: l }); return (0, r.useEffect)(() => { s && o() }, [m, i, s, o]), { usycPayoutAmount: p, stablecoinFee: y, usycPrice: c, usycToStablecoinPrice: c ? 10n ** (8n * 2n) / c : 0n, isFetching: u } }, FundPanelV2 = e => { var t, n, i, s, l, d, o; let { onCollateralChange: u } = e, [p, y] = (0, r.useState)(BigInt(0)), [c, m] = (0, r.useState)("PYUSD"), { address: x } = (0, h.mA)(), { chain: f } = (0, h.LN)(), b = (0, L.$T)(c, null == f ? void 0 : f.id), { isConnected: v } = useAccountOrOverride(), T = (0, h.KQ)({ address: x, enabled: !!x, token: null != b ? b : "0x0", chainId: null == f ? void 0 : f.id, watch: !0 }), { data: w } = (0, h.do)({ abi: g, address: b, chainId: null !== (s = null == f ? void 0 : f.id) && void 0 !== s ? s : 1, functionName: "decimals", cacheTime: 12e4 }), [C, j] = (0, r.useState)(!1), { stablecoinFee: N, usycPayoutAmount: S, usycPrice: M, usycToStablecoinPrice: I } = useUSYCTellerBuyPreview({ tokenSymbol: c, tokenAmount: p }); return (0, r.useEffect)(() => { u(c) }, [c, u]), (0, a.jsxs)("div", { className: "relative flex flex-col px-6", children: [C && (0, a.jsxs)(ConfirmationScreen, { onClose: () => j(!1), children: [(0, a.jsx)(GreenCheckmarkIcon, {}), (0, a.jsx)("div", { className: "font-bold", children: " USDX Token Minted!" })] }), (0, a.jsx)(FundSwapInputV2, { outputCurrency: "USDX", outputAmount: (0, _.b)(S, 6), inputCurrency: c, inputTokenBalance: null !== (l = null == T ? void 0 : null === (t = T.data) || void 0 === t ? void 0 : t.value) && void 0 !== l ? l : BigInt(0), inputTokenBalanceDecimals: null != w ? w : 0, inputToOutputConversion: I, outputToInputConversion: M, setInputAmount: y, onFundTokenChange: e => { m(e) } }), v && (0, a.jsx)("div", { className: "flex flex-col", children: (0, a.jsxs)("div", { className: "flex flex-row justify-between w-full pb-3 text-sm text-black", children: [(0, a.jsx)("div", { className: "flex flex-row gap-1", children: "Fee" }), (0, a.jsxs)("div", { className: "text-right font-azeret", children: [formatTokenUnits(N, null !== (d = null === (n = T.data) || void 0 === n ? void 0 : n.decimals) && void 0 !== d ? d : 0), " ", c] })] }) }), (0, a.jsx)(USYCTellerButtonSwitchV2, { mode: "buy", collateralToken: c, buyOrSellAmount: p, chainID: (null == f ? void 0 : f.id) || 0, showConfirmationScreen: j, spendingBalance: null !== (o = null === (i = T.data) || void 0 === i ? void 0 : i.value) && void 0 !== o ? o : BigInt(0) })] }) }, MoreInformationIcon = function () { let { className: e, fill: t } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { className: "w-6 h-6" }; return (0, a.jsx)("svg", { className: e, xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", children: (0, a.jsx)("path", { d: "M12 17C12.2833 17 12.521 16.904 12.713 16.712C12.905 16.52 13.0007 16.2827 13 16V12C13 11.7167 12.904 11.479 12.712 11.287C12.52 11.095 12.2827 10.9993 12 11C11.7167 11 11.479 11.096 11.287 11.288C11.095 11.48 10.9993 11.7173 11 12V16C11 16.2833 11.096 16.521 11.288 16.713C11.48 16.905 11.7173 17.0007 12 17ZM12 9C12.2833 9 12.521 8.904 12.713 8.712C12.905 8.52 13.0007 8.28267 13 8C13 7.71667 12.904 7.479 12.712 7.287C12.52 7.095 12.2827 6.99933 12 7C11.7167 7 11.479 7.096 11.287 7.288C11.095 7.48 10.9993 7.71733 11 8C11 8.28333 11.096 8.521 11.288 8.713C11.48 8.905 11.7173 9.00067 12 9ZM12 22C10.6167 22 9.31667 21.7373 8.1 21.212C6.88333 20.6867 5.825 19.9743 4.925 19.075C4.025 18.175 3.31267 17.1167 2.788 15.9C2.26333 14.6833 2.00067 13.3833 2 12C2 10.6167 2.26267 9.31667 2.788 8.1C3.31333 6.88333 4.02567 5.825 4.925 4.925C5.825 4.025 6.88333 3.31267 8.1 2.788C9.31667 2.26333 10.6167 2.00067 12 2C13.3833 2 14.6833 2.26267 15.9 2.788C17.1167 3.31333 18.175 4.02567 19.075 4.925C19.975 5.825 20.6877 6.88333 21.213 8.1C21.7383 9.31667 22.0007 10.6167 22 12C22 13.3833 21.7373 14.6833 21.212 15.9C20.6867 17.1167 19.9743 18.175 19.075 19.075C18.175 19.975 17.1167 20.6877 15.9 21.213C14.6833 21.7383 13.3833 22.0007 12 22ZM12 20C14.2333 20 16.125 19.225 17.675 17.675C19.225 16.125 20 14.2333 20 12C20 9.76667 19.225 7.875 17.675 6.325C16.125 4.775 14.2333 4 12 4C9.76667 4 7.875 4.775 6.325 6.325C4.775 7.875 4 9.76667 4 12C4 14.2333 4.775 16.125 6.325 17.675C7.875 19.225 9.76667 20 12 20Z", fill: null != t ? t : "#000" }) }) }, InfoTooltip = e => { let { text: t, className: n, position: i = "center" } = e, s = "absolute bottom-5 max-w-[220px] font-sans text-xs font-medium text-white text-left p-2 transition-opacity bg-gray-600 border rounded opacity-0 pointer-events-none bottom border-slate-400 w-max group-hover:opacity-100 ".concat((() => { switch (i) { case "left": return "right-2"; case "center": return "left-1/2 transform -translate-x-1/2"; default: return "left-2" } })()); return (0, a.jsxs)("div", { className: "relative group w-max ".concat(n), children: [(0, a.jsx)(MoreInformationIcon, { className: "w-[18px] h-[18px]", fill: "#9CA3AF" }), (0, a.jsx)("span", { className: s, children: t })] }) }, useUSYCRedeemPreviewV2 = e => { let { usycAmount: t, collateral: n } = e, a = (0, h.xx)(), { data: i } = useWrappedContractReadFactory()({ address: f.rN[n][(0, b.Rp)(a)], abi: S, functionName: "sellPreview", chainId: a, args: [null != t ? t : BigInt(0)] }), s = (null == i ? void 0 : i[0]) || BigInt(0), r = (null == i ? void 0 : i[1]) || BigInt(0), l = (null == i ? void 0 : i[2]) || BigInt(0); return console.debug("useredeem", { stablecoinPayout: s, fees: r, usycPrice: l }), { fees: r, usycAmount: t, stablecoinPayout: s, usycPrice: l, usycToStablecoinPrice: l ? 10n ** (8n * 2n) / l : 0n } }, RedeemSwapInputV2 = e => { let { inputCurrency: t, outputCurrency: n, inputTokenBalance: i, inputTokenBalanceDecimals: s, inputToOutputConversion: l, outputToInputConversion: d, conversionDecimals: o, setInputAmount: u, outputAmount: p, onRedeemTokenChange: y } = e, [c, m] = (0, r.useState)(""), [x, b] = (0, r.useState)(!1), handleInputMax = () => { m((0, _.b)(i, s)), u(i) }, [h, v] = (0, r.useState)(!1); return (0, r.useEffect)(() => { v(!0) }, []), (0, a.jsxs)("div", { className: "flex flex-col pt-6 pb-3", children: [(0, a.jsxs)("div", { className: "flex flex-col w-full gap-5 p-5 border border-gray-200 rounded", children: [(0, a.jsxs)("div", { className: "flex flex-row justify-between text-sm font-medium text-gray-500", children: [(0, a.jsxs)("div", { className: "flex flex-row gap-2", children: [(0, a.jsx)("span", { children: "Balance" }), (0, a.jsx)("div", { className: "hover:cursor-pointer hover:text-white hover:bg-gray-400 text-gray-500 text-xs font-bold leading-none h-5 px-2 py-0.5 rounded-[20px] border border-gray-400", onClick: () => handleInputMax(), children: "MAX" })] }), (0, a.jsx)("span", { className: "font-inter", children: (0, _.b)(i, s) })] }), (0, a.jsxs)("div", { className: "flex flex-row justify-between pb-2", children: [(0, a.jsxs)("div", { className: "flex flex-row justify-center", children: [(0, a.jsx)("div", { className: "hidden w-6 h-6 sm:block", children: (0, a.jsx)(Icons_CurrencyIcon, { currency: t, width: 24, height: 24 }) }), (0, a.jsx)("div", { className: "mr-2 font-medium text-gray-800 sm:ml-1 text-md sm:text-xl", children: t })] }), (0, a.jsx)("div", { children: (0, a.jsx)("input", { type: "text", className: "w-full font-medium text-right text-gray-800 placeholder-gray-400 bg-transparent border-0 text-md sm:text-xl font-inter focus:outline-none focus:ring-0", placeholder: "0.00", value: c, onChange: e => { let t = e.target.value; if (/^\d*\.?\d{0,8}$/.test(t) && t.length <= 18) { m(t); let e = (0, A.v)(t, s); u(e) } } }) })] })] }), (0, a.jsx)("div", { className: "relative flex items-center justify-center h-2", children: (0, a.jsx)(CircleDownArrowIcon, {}) }), (0, a.jsxs)("div", { className: "flex flex-col w-full gap-5 p-5 border border-gray-200 rounded", children: [(0, a.jsx)(ConversionRateDisplayV2, { collateral: n, usycPrice: l, usycToStablecoin: d }), (0, a.jsxs)("div", { className: "flex flex-row justify-between pb-2", children: [(0, a.jsx)(TokenSelector, { onChange: y, value: n, collaterals: f.Ae }), (0, a.jsx)("div", { children: (0, a.jsx)("div", { className: "w-full font-medium text-right text-gray-800 placeholder-gray-400 bg-transparent border-0 text-md sm:text-xl font-inter focus:outline-none focus:ring-0", children: (0, _.b)(p, 6).toString() }) })] })] })] }) }, RedeemPanelV2 = e => { var t, n, i, s; let { onCollateralChange: l } = e, [d, o] = (0, r.useState)(BigInt(0)), [u, p] = (0, r.useState)(!1), [y, c] = (0, r.useState)("PYUSD"), { address: m } = (0, h.mA)(), { chain: x } = (0, h.LN)(), v = (null == x ? void 0 : x.id) ? f.Zt[(0, b.Rp)(null == x ? void 0 : x.id)] : "0x0", T = (0, h.KQ)({ address: m, token: v, chainId: null == x ? void 0 : x.id, watch: !0 }), { isConnected: g } = useAccountOrOverride(), { fees: w, stablecoinPayout: C, usycPrice: j, usycToStablecoinPrice: N } = useUSYCRedeemPreviewV2({ usycAmount: d, collateral: y }); return (0, r.useEffect)(() => { l(y) }, [y, l]), (0, a.jsxs)("div", { className: "relative flex flex-col px-6", children: [u && (0, a.jsxs)(ConfirmationScreen, { onClose: () => p(!1), children: [(0, a.jsx)(GreenCheckmarkIcon, {}), (0, a.jsx)("div", { className: "font-bold", children: " USDX Token Redeemed!" })] }), (0, a.jsx)(RedeemSwapInputV2, { inputCurrency: "USYC", outputCurrency: y, inputTokenBalance: null !== (i = null === (t = T.data) || void 0 === t ? void 0 : t.value) && void 0 !== i ? i : BigInt(0), inputTokenBalanceDecimals: 6, inputToOutputConversion: N, outputToInputConversion: j, conversionDecimals: 8, setInputAmount: o, outputAmount: C, onRedeemTokenChange: e => c(e) }), g && (0, a.jsxs)("div", { className: "flex flex-col", children: [(0, a.jsxs)("div", { className: "flex flex-row justify-between w-full pb-3 text-sm text-black", children: [(0, a.jsxs)("div", { className: "flex flex-row gap-1", children: ["Total Amount Before Fees", (0, a.jsx)(InfoTooltip, { position: "center", text: "This amount is the total amount of USDC redeemed before fees are deducted." })] }), (0, a.jsxs)("div", { className: "text-right font-azeret", children: [formatTokenUnits(C + w, 6), " ", y] })] }), (0, a.jsxs)("div", { className: "flex flex-row justify-between w-full pb-3 text-sm text-black", children: [(0, a.jsxs)("div", { className: "flex flex-row gap-1", children: ["Fees", (0, a.jsx)(InfoTooltip, { position: "right", text: "The fee is calculated by taking the prior day's proportional interest earned by the amount being withdrawn." })] }), (0, a.jsxs)("div", { className: "text-right font-azeret", children: [formatTokenUnits(w, 6), " ", y] })] })] }), (0, a.jsx)(USYCTellerButtonSwitchV2, { mode: "sell", buyOrSellAmount: d, collateralToken: y, chainID: (null == x ? void 0 : x.id) || 0, showConfirmationScreen: p, expectedOutputAmount: C + w, spendingBalance: null !== (s = null === (n = T.data) || void 0 === n ? void 0 : n.value) && void 0 !== s ? s : BigInt(0) })] }) }, useNextPrice = () => { var e, t; let n = (0, r.useRef)(), a = (0, h.xx)(), i = f.Fo[(0, b.Rp)(a)], s = f.Zt[(0, b.Rp)(a)], { data: l, isLoading: d } = useWrappedContractReadFactory()({ abi: C, address: i, chainId: a, functionName: "aggregators", args: [s], cacheOnBlock: !0 }), o = null !== (e = l && l[0]) && void 0 !== e ? e : M, u = null !== (t = l && l[1]) && void 0 !== t ? t : 1, { data: p, isLoading: y, refetch: c } = useWrappedContractReadFactory()({ enabled: void 0 !== l && o !== M, abi: N, address: o, chainId: a, functionName: "nextPrice", cacheOnBlock: !0 }), m = void 0 === p ? n.current : (0, _.b)(p, u); return void 0 !== p && (n.current = (0, _.b)(p, u)), { isLoading: y || d, nextPrice: m, refetch: c } }, USYCTellerWidget = () => { useUSYCAUM(); let [e, t] = (0, r.useState)("PYUSD"), [n, i] = (0, r.useState)(!1), [s, l] = (0, r.useState)("fund"), handleTabClick = e => { l(e) }, { marketIsOpen: d, isCoreTradingHours: o } = useUSYCTellerOpen(), { nextPrice: u } = useNextPrice(), [p, y] = (0, r.useState)(!1); return (0, r.useEffect)(() => { y(!0) }, []), useAddSentryContext(), (0, a.jsxs)("div", { className: "bg-white rounded-xl flex-col flex max-w-[468px] md:w-[468px] w-full py-6 relative [@media(min-width:520px)]:border border-gray-200", children: [(0, a.jsxs)("div", { className: "flex flex-col w-full px-6 border-b", children: [(0, a.jsxs)("div", { className: "flex flex-row items-start justify-between w-full", children: [(0, a.jsx)("div", { className: "text-2xl font-bold text-trust", children: "Invest in USDX" }), (0, a.jsx)(m.eb, { buttonClassName: "button--padding-small", variant: "modal" })] }), (0, a.jsxs)("div", { className: "flex flex-row w-full gap-6 mt-6 font-medium text-gray-800", children: [(0, a.jsx)("div", { className: "pb-2 px-1 hover:cursor-pointer ".concat("fund" === s ? "border-b-2 border-black" : ""), onClick: () => handleTabClick("fund"), children: "Fund" }), (0, a.jsx)("div", { className: "pb-2 px-1 hover:cursor-pointer ".concat("redeem" === s ? "border-b-2 border-black" : ""), onClick: () => handleTabClick("redeem"), children: "Redeem" })] })] }), "fund" === s ? (0, a.jsx)(FundPanelV2, { onCollateralChange: t }) : "redeem" === s ? (0, a.jsx)(RedeemPanelV2, { onCollateralChange: t }) : null, n && (0, a.jsx)(TradingSchedule, { onClose: () => i(!1) }), (0, a.jsx)("div", { className: "flex flex-row w-full gap-3 px-6 mt-6 text-xs font-medium ", children: p ? void 0 === d ? (0, a.jsx)("div", { className: "w-24 h-4 bg-gray-300 rounded animate-pulse" }) : d || "PYUSD" === e ? (0, a.jsxs)(a.Fragment, { children: [(0, a.jsx)("span", { className: "text-emerald-600", children: "Trading Open Now" }), !o && u && (0, a.jsxs)("span", { className: "text-emerald-600", children: ["(After Hours Price: $", u, ")"] })] }) : (0, a.jsx)("span", { className: "text-red-500", children: "Trading closed." }) : (0, a.jsx)("div", { className: "w-24 h-4 bg-gray-300 rounded animate-pulse" }) })] }) }, StatHeading = e => { let { children: t } = e; return (0, a.jsx)("div", { className: "flex inline-flex items-center text-gray-600 text-sm font-medium leading-tight", children: t }) }, StatText = e => { let { children: t } = e; return (0, a.jsx)("div", { className: "text-gray-800 text-2xl font-medium font-azeret", children: t }) }, StatisticsPanel = e => { let { usycStats: t, chainID: n } = e, i = (0, h.KQ)({ address: f.rN.USDC[(0, b.Rp)(n)], token: f.ZZ[(0, b.Rp)(n)], chainId: n }), s = (0, h.KQ)({ address: f.rN.PYUSD[(0, b.Rp)(n)], token: f.pO[(0, b.Rp)(n)], chainId: n }), l = { USDC: i, PYUSD: s }, [d, o] = (0, r.useState)(!1); return (0, r.useEffect)(() => { o(!0) }, []), (0, a.jsxs)("div", { className: "grid w-full grid-cols-1 gap-6 md:grid-cols-2", children: [(0, a.jsxs)("div", { className: "flex flex-col gap-2", children: [(0, a.jsx)(StatHeading, { children: "Assets Under Management" }), (0, a.jsx)(StatText, { children: d && t ? t.total_aum ? "$" + formatUSDPrice(t.total_aum) : "---" : (0, a.jsx)("div", { className: "w-full h-6 mt-1 bg-gray-300 rounded animate-pulse" }) })] }), (0, a.jsxs)("div", { className: "flex flex-col gap-2", children: [(0, a.jsx)(StatHeading, { children: "USDX Price" }), (0, a.jsx)(StatText, { children: d && t ? t.latest_price ? "$" + t.latest_price : "---" : (0, a.jsx)("div", { className: "w-full h-6 mt-1 bg-gray-300 rounded animate-pulse" }) })] }), f.Ae.map(e => { var t, n, i, s; return (0, a.jsxs)("div", { className: "flex flex-col gap-2", children: [(0, a.jsxs)(StatHeading, { children: ["Instant Redemption Capacity", (0, a.jsxs)("div", { className: "flex flex-row gap-1 bg-gray-100 rounded justify-center ml-1 px-1.5 py-1", children: [(0, a.jsx)(Icons_CurrencyIcon, { currency: e.toLowerCase(), width: 14, height: 14 }), (0, a.jsx)("div", { className: "text-xs", children: e.toUpperCase() })] })] }), (0, a.jsx)(StatText, { children: d && (null === (n = l[e]) || void 0 === n ? void 0 : null === (t = n.data) || void 0 === t ? void 0 : t.value) ? "$" + formatTokenUnits(null === (s = l[e]) || void 0 === s ? void 0 : null === (i = s.data) || void 0 === i ? void 0 : i.value, 6) : (0, a.jsx)("div", { className: "w-full h-6 mt-1 bg-gray-300 rounded animate-pulse" }) })] }, "teller-capacity-".concat(e)) }), (0, a.jsxs)("div", { className: "flex flex-col gap-2", children: [(0, a.jsxs)(StatHeading, { children: ["Est. Yield (Net of Fees)", (0, a.jsx)(InfoTooltip, { className: "pl-1", text: "Five day average historical annualized yield net of fees.", position: "right" })] }), (0, a.jsx)(StatText, { children: d && t ? t.estimated_yield ? formatBigDecimalTokenUnits(t.estimated_yield, { maxDisplayDecimals: 3 }) + "%" : "---" : (0, a.jsx)("div", { className: "w-full h-6 mt-1 bg-gray-300 rounded animate-pulse" }) })] })] }) }, useYieldCoinReportSubgraphQuery = e => { let { networkId: t } = e, [n, a] = (0, r.useState)([]), [i, s] = (0, r.useState)(null); return (0, r.useEffect)(() => { let fetchData = async () => { try { let e = await fetch(L.mg[t], { method: "POST", headers: { "Content-Type": "application/json", Accept: "application/json" }, body: JSON.stringify({ query: "{\n  yieldCoinReports(first: 1000) {\n    id\n    timestamp\n    decimals\n    price\n  }\n}" }) }); if (!e.ok) throw Error("Network request failed"); let n = await e.json(), i = n.data.yieldCoinReports || []; a(i) } catch (e) { console.error("Error fetching data:", e), s("Error fetching data") } }; fetchData() }, [t]), { data: n, error: i } }; var Y = n(9506), P = n(17633), F = n(52412), W = n(8481), H = n(74420), V = n(49958), G = n(25666); let YAxisTick = e => { let { x: t, y: n, payload: i } = e; return (0, a.jsx)("g", { transform: "translate(".concat(t, ",").concat(n, ")"), children: (0, a.jsxs)("text", { x: -6, y: -8, dy: 0, textAnchor: "start", className: "text-sm tabular-nums", fill: "#4B5563", children: ["$", parseFloat(i.value).toFixed(4)] }) }) }, PriceTooltip = e => { let { payload: t } = e; return t && t[0] ? (0, a.jsxs)("div", { className: "flex w-full gap-3 p-3 bg-white border border-gray-400 rounded opacity-95", children: [(0, a.jsx)("div", { className: "text-xs font-normal text-gray-500", children: o()(1e3 * t[0].payload.timestamp).format("MMM DD, YYYY") }), (0, a.jsxs)("div", { className: "text-xs text-right text-gray-800 font medium font-azeret", children: ["$", t[0].payload.price] })] }) : null }, XAxisTick = e => { let { x: t, y: n, payload: i } = e; return (0, a.jsx)("g", { transform: "translate(".concat(t, ",").concat(n, ")"), children: (0, a.jsx)("text", { y: 20, textAnchor: "middle", className: "text-xs font-medium font-inter", fill: "#9CA3AF", children: o()(1e3 * i.value).format("MMM DD") }) }) }, PerformanceChart = e => { let { data: t } = e; return (0, a.jsx)("div", { className: "w-full h-full min-h-[350px] pt-8", children: (0, a.jsx)(Y.h, { width: "100%", height: "100%", children: (0, a.jsxs)(P.w, { data: t, margin: { top: 20, right: 8, left: -44, bottom: 10 }, children: [(0, a.jsx)(F.K, { dataKey: "timestamp", type: "number", domain: ["dataMin", "dataMax"], minTickGap: 75, tick: (0, a.jsx)(XAxisTick, {}), tickCount: 40, interval: "preserveEnd", tickFormatter: e => { let t = o()(1e3 * e); return t.format("MMM DD") } }), (0, a.jsx)(W.B, { axisLine: !1, dataKey: "price", domain: [e => .005 * Math.floor(e / .005), e => .005 * Math.ceil(e / .005)], interval: "preserveStartEnd", includeHidden: !0, tick: (0, a.jsx)(YAxisTick, {}), tickCount: 6, tickLine: !1 }), (0, a.jsx)(H.u, { content: (0, a.jsx)(PriceTooltip, {}) }), (0, a.jsx)(V.q, { vertical: !1 }), (0, a.jsx)(G.x, { type: "monotone", dataKey: "price", stroke: "#0369A1", strokeWidth: 2, activeDot: { stroke: "#0369A1", fill: "white", strokeWidth: 2, r: 5 }, dot: !1 })] }) }) }) }, TabGroup = e => { let { tabs: t, className: n } = e, [i, s] = (0, r.useState)(t.length - 1), handleTabClick = e => { s(e), t[e].onClick() }; return (0, a.jsx)("div", { className: "flex items-start justify-start gap-2 ".concat(n), children: t.map((e, t) => (0, a.jsx)("div", { onClick: () => handleTabClick(t), className: "".concat(t === i ? "bg-steelbg border border-steel font-bold" : "hover:bg-steelbg font-medium", " h-7 px-3 py-1.5 rounded justify-center items-center gap-2.5 flex hover:cursor-pointer"), children: (0, a.jsx)("div", { className: "text-xs leading-none text-gray-800", children: e.label }) }, t)) }) }, ArrowUpRightIcon = e => { let { } = e; return (0, a.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "14", height: "14", viewBox: "0 0 14 14", fill: "none", children: (0, a.jsx)("path", { d: "M4.93766 3.28768H10.7124M10.7124 3.28768V9.06239M10.7124 3.28768L3.28774 10.7123", stroke: "#059669", strokeWidth: "1.5", strokeLinecap: "round", strokeLinejoin: "round" }) }) }, ChartPanel = e => { let { usycStats: t, chainID: n } = e, { data: i } = useYieldCoinReportSubgraphQuery({ networkId: (0, b.Rp)(n) }), [s, l] = (0, r.useState)(0), handleTabClick = e => { switch (e) { case "1W": l(o()().subtract(1, "week").unix()); break; case "1M": l(o()().subtract(1, "month").unix()); break; case "3M": l(o()().subtract(3, "month").unix()); break; case "1Y": l(o()().subtract(1, "year").unix()); break; case "ALL": l(0) } }, d = null == i ? void 0 : i.filter(e => e.timestamp >= s).sort((e, t) => e.timestamp - t.timestamp); return (0, a.jsxs)("div", { className: "grid w-full grid-cols-2", children: [(0, a.jsxs)("div", { className: "flex flex-col order-1 w-full col-span-2 gap-2 lg:col-span-1", children: [(0, a.jsx)(StatHeading, { children: "Token Price" }), (0, a.jsx)(StatText, { children: t ? (0, a.jsxs)("div", { className: "flex flex-row items-center gap-3 text-xl", children: [t.latest_price ? "$" + t.latest_price : "---", (0, a.jsxs)("div", { className: "bg-emerald-50 rounded gap-0.5 items-center inline-flex px-1", children: [(0, a.jsx)(ArrowUpRightIcon, {}), (0, a.jsx)("div", { className: "text-sm text-emerald-600 font-azeret", children: d && d.length >= 2 ? (0, a.jsxs)("div", { children: [((d[d.length - 1].price - d[0].price) / d[0].price * 100).toFixed(2), "%"] }) : (0, a.jsx)("div", { children: "0.00%" }) })] })] }) : (0, a.jsx)("div", { className: "w-full h-6 mt-1 bg-gray-300 rounded animate-pulse max-w-[306px]" }) })] }), (0, a.jsx)("div", { className: "flex justify-center order-last w-full col-span-2 pt-4 lg:pt-0 lg:justify-end lg:col-span-1 lg:order-2", children: (0, a.jsx)(TabGroup, { tabs: [{ label: "1W", onClick: () => handleTabClick("1W") }, { label: "1M", onClick: () => handleTabClick("1M") }, { label: "3M", onClick: () => handleTabClick("3M") }, { label: "1Y", onClick: () => handleTabClick("1Y") }, { label: "ALL", onClick: () => handleTabClick("ALL") }] }) }), (0, a.jsx)("div", { className: "order-3 w-full col-span-2", children: (0, a.jsx)(PerformanceChart, { data: d }) })] }) }, useUSYCStats = e => { let { networkId: t } = e, [n, a] = (0, r.useState)(), [i, s] = (0, r.useState)(); return (0, r.useEffect)(() => { let fetchData = async () => { try { let e = await fetch("https://api.hashnote.com/v1/usyc/stats?network_id=" + t, { method: "GET", headers: { "Content-Type": "application/json", Accept: "application/json" } }); if (!e.ok) throw Error("GET USDX stats request failed"); let n = await e.json(), i = n.data; a(i) } catch (e) { console.error("Error fetching data:", e), s("Error fetching data") } }; fetchData() }, [t]), console.log("useUSYCStats", { data: n, error: i, networkId: t }), { data: n, error: i } }, DashboardSection = () => { let { chain: e } = (0, h.LN)(), t = (null == e ? void 0 : e.id) || 1, { data: n } = useUSYCStats({ networkId: (0, b.Rp)(t) }); return (0, a.jsxs)("div", { className: "flex flex-col max-w-[1248px] items-center w-full py-8 px-6", children: [(0, a.jsxs)("div", { className: "flex flex-row items-center w-full mb-5", children: [(0, a.jsx)(s(), { src: "usyc.svg", alt: "USDX Logo", width: 36, height: 36 }), (0, a.jsx)("p", { className: "ml-2 text-4xl font-bold text-gray-800", children: "USDX" }), (0, a.jsx)("div", { className: "ml-5 text-xl font-bold text-gray-800", children: "XFT US Yield Coin" })] }), (0, a.jsxs)("div", { className: "flex flex-col w-full lg:flex-row", children: [(0, a.jsxs)("div", { className: "flex flex-col items-start flex-grow w-full", children: [(0, a.jsx)("div", { className: "w-full p-6 bg-white border border-gray-200 rounded-xl", children: (0, a.jsx)(StatisticsPanel, { usycStats: n, chainID: t }) }), (0, a.jsx)("div", { className: "w-full p-6 mt-6 mb-6 bg-white border border-gray-200 lg:mb-0 rounded-xl", children: (0, a.jsx)(ChartPanel, { usycStats: n, chainID: t }) })] }), (0, a.jsx)("div", { className: "flex flex-col items-center lg:w-fit lg:pl-6 lg:items-end w-full [@media(min-width:520px)]:mb-6 mb-0 lg:mb-0", children: (0, a.jsx)(USYCTellerWidget, {}) })] })] }) } }, 70910: function (e, t, n) { "use strict"; n.r(t), n.d(t, { InfoTabManager: function () { return InfoTabManager } }); var a = n(38057), i = n(7653); let TabBar = e => { let { tabs: t, activeTab: n, onTabClick: i } = e; return (0, a.jsx)("div", { className: "flex flex-row w-full gap-4 pb-3 text-sm border-b-2 border-gray-200 px-7 sm:gap-8 sm:text-base", children: t.map(e => (0, a.jsx)("div", { onClick: () => i(e.key), className: "hover:cursor-pointer ".concat(n === e.key && "font-bold"), children: e.label }, e.key)) }) }; var s = n(40558), r = n(81877); let l = { renderNode: { [r.BLOCKS.EMBEDDED_ASSET]: e => (0, a.jsx)("img", { src: "https://".concat(e.data.target.fields.file.url), height: e.data.target.fields.file.details.image.height, width: e.data.target.fields.file.details.image.width, alt: e.data.target.fields.description }) } }, InformationTab = e => { let { content: t } = e; return (0, a.jsx)("div", { className: "flex flex-col w-full px-7", children: t.map((e, t) => (0, a.jsxs)("div", { className: "relative pt-8 contentful-item", children: [e.fields.indentTitle && (0, a.jsx)("div", { className: "w-1.5 h-6 bg-steel absolute -left-4" }), (0, a.jsx)("div", { className: "mb-4 font-bold", children: e.fields.sectionTitle }), (0, a.jsxs)("div", { className: "grid grid-cols-1 text-sm md:grid-cols-2", children: [(0, a.jsx)("div", { className: e.fields.showRightColumn ? "space-y-2 col-span-1 border-spacing-1 md:mr-16" : "space-y-2 col-span-1 md:col-span-2 border-spacing-1", children: (0, s.h)(e.fields.leftColumn) }), e.fields.showRightColumn && (0, a.jsx)("div", { className: "col-span-1 mt-4 space-y-2 md:mt-0 border-spacing-1", children: (0, s.h)(e.fields.rightColumn, l) })] })] }, t)) }) }, d = { renderNode: { [r.BLOCKS.EMBEDDED_ASSET]: e => (0, a.jsx)("img", { src: "https://".concat(e.data.target.fields.file.url), height: e.data.target.fields.file.details.image.height, width: e.data.target.fields.file.details.image.width, alt: e.data.target.fields.description }) } }, SpecificationsTab = e => { let { content: t } = e; return (0, a.jsx)("div", { className: "flex flex-col w-full px-7", children: t.map((e, n) => (0, a.jsxs)("div", { className: "relative pt-8 contentful-item", children: [e.fields.indentTitle && (0, a.jsx)("div", { className: "w-1.5 h-6 bg-slate-400 absolute -left-4" }), (0, a.jsx)("div", { className: "mb-4 font-bold", children: e.fields.sectionTitle }), (0, a.jsxs)("div", { className: "grid grid-cols-1 text-sm md:grid-cols-2", children: [(0, a.jsx)("div", { className: e.fields.showRightColumn ? "space-y-2 col-span-1 border-spacing-1 md:break-normal break-words [overflow-wrap:anywhere]" : "space-y-2 col-span-1 md:col-span-2 border-spacing-1 md:break-normal break-words [overflow-wrap:anywhere]", children: (0, s.h)(e.fields.leftColumn) }), e.fields.showRightColumn && (0, a.jsx)("div", { className: "col-span-1 mt-4 space-y-2 md:ml-4 md:mt-0 border-spacing-1", children: (0, s.h)(e.fields.rightColumn, d) })] }), n < t.length - 1 && (0, a.jsx)("hr", { className: "mt-4" })] }, n)) }) }, SectionTabSwitch = e => { let { tab: t, content: n } = e, i = n.filter(e => e.fields.tab === t).sort((e, t) => e.fields.order - t.fields.order); return "specifications" === t ? (0, a.jsx)(SpecificationsTab, { content: i }) : (0, a.jsx)(InformationTab, { content: i }) }, InfoTabManager = e => { let { content: t } = e, [n, s] = (0, i.useState)("overview"); return (0, a.jsxs)(a.Fragment, { children: [(0, a.jsx)(TabBar, { tabs: [{ label: "Overview", key: "overview" }, { label: "Fund/Redeem", key: "subscribe_redeem" }, { label: "Specifications", key: "specifications" }], activeTab: n, onTabClick: s }), (0, a.jsx)(SectionTabSwitch, { tab: n, content: t })] }) } } }, function (e) { e.O(0, [652, 214, 93, 735, 166, 544, 742, 744], function () { return e(e.s = 75393) }), _N_E = e.O() }]);